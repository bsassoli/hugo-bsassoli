[{"categories":null,"content":"(𝜆𝑎𝑏𝑐.𝑐𝑏𝑎)𝑧𝑧(𝜆𝑤𝑣.𝑤) (𝜆𝑏𝑐.𝑐𝑏𝑧)(𝑧)(𝜆𝑤𝑣.𝑤) (𝜆𝑐.𝑐𝑧𝑧)(𝜆𝑤𝑣.𝑤) (𝜆𝑤𝑣.𝑤)(𝑧𝑧) 𝑧𝑧 (𝜆𝑥.𝜆𝑦.𝑥𝑦𝑦)(𝜆𝑎.𝑎)𝑏 (𝜆𝑦.(𝜆𝑎.𝑎)yy)(𝑏) (𝜆𝑎.𝑎)𝑏𝑏 𝑏𝑏 (𝜆𝑦.𝑦)(𝜆𝑥.𝑥𝑥)(𝜆𝑧.𝑧𝑞) (𝜆𝑥.𝑥𝑥)(𝜆𝑧.𝑧𝑞) (𝜆𝑧.𝑧𝑞)(𝜆𝑧.𝑧𝑞) (𝜆𝑧.𝑧𝑞)(𝑞) 𝑞𝑞 (𝜆𝑧.𝑧)(𝜆𝑧.𝑧𝑧)(𝜆𝑧.𝑧𝑦) (𝜆𝑧.𝑧𝑧)(𝜆𝑞.𝑞𝑦) (𝜆𝑞.𝑞𝑦)(𝜆𝑞.𝑞𝑦) (𝜆𝑞.𝑞𝑦)(y) yy (𝜆𝑥.𝜆𝑦.𝑥𝑦𝑦)(𝜆𝑦.𝑦)𝑦 (𝜆𝑥.𝜆𝑦.𝑥𝑦𝑦)(𝜆𝑞.𝑞)(𝑦) (𝜆𝑦.(𝜆𝑞.𝑞)𝑦𝑦)(𝑦) ((𝜆𝑞.𝑞)𝑦)(𝑦) 𝑦𝑦 (𝜆𝑎.𝑎𝑎)(𝜆𝑏.𝑏𝑎)𝑐 (𝜆𝑎.𝑎𝑎)(𝜆𝑏.𝑏𝑎)𝑐 (𝜆𝑏.𝑏𝑎)(𝜆𝑏.𝑏𝑎)(𝑐) (𝜆𝑏.𝑏𝑎)(𝑎)(𝑐) 𝑎𝑎𝑐 (𝜆𝑥𝑦𝑧.𝑥𝑧(𝑦𝑧))(𝜆𝑥.𝑧)(𝜆𝑥.𝑎) (𝜆𝑥.𝜆𝑦.𝜆𝑧.𝑥𝑧(𝑦𝑧))(𝜆𝑥.𝑐)(𝜆𝑥.𝑎) (𝜆𝑦.𝜆𝑧.(𝜆𝑥.𝑐)(𝑧)(𝑦𝑧))(𝜆𝑥.𝑎) (𝜆𝑧.(𝜆𝑥.𝑐)(𝑧)((𝜆𝑥.𝑎)𝑧)) (𝜆𝑧.𝑐(𝜆𝑥.𝑎(𝑧))) (𝜆𝑧.𝑐𝑎) ","date":"2023-07-01","objectID":"/pages/chapter-1-exercises/:0:0","tags":null,"title":"Chapter 1 Exercises","uri":"/pages/chapter-1-exercises/"},{"categories":["Learning Haskell"],"content":"Notes on chapters 1 and 2 of the Haskell book","date":"2023-06-30","objectID":"/haskell-book-part1/","tags":["programming","programming languages","Haskell"],"title":"Haskell Book: Part 1","uri":"/haskell-book-part1/"},{"categories":["Learning Haskell"],"content":"So this morning I got started with the Haskell book. Here are some notes and exercises. ","date":"2023-06-30","objectID":"/haskell-book-part1/:0:0","tags":["programming","programming languages","Haskell"],"title":"Haskell Book: Part 1","uri":"/haskell-book-part1/"},{"categories":["Learning Haskell"],"content":"Chapter 1 This is just a very short and simple introduction to the lambda calculus. Syntax of λ-calculus \u003cexpression\u003e := \u003cname\u003e | \u003cfunction\u003e | \u003capplication\u003e \u003cfunction\u003e := λ \u003cname\u003e.\u003cexpression\u003e \u003capplication\u003e := \u003cexpression\u003e\u003cexpression\u003e α-equivalence: basically the notion that $\\lambda{x}.x$, $\\lambda{y}.y$ and $\\lambda{z}.z$ all express the same function. β-reduction: when you apply a function to some expression you replace all bound occurrences in the body with that expression and eliminate the head. To indicate that we are substituting e.g. $x$ with $z$ in $\\lambda{x}.x$ we write: $$[x := z]$$ Applications are left-associative: $$(\\lambda{x}.x)(\\lambda{y}.y)z$$ is equivalent to $$((\\lambda{x}.x)(\\lambda{y}.y))z$$ Exercises sayHello :: String -\u003e IO() sayHello x = \"hello \" ++ x ","date":"2023-06-30","objectID":"/haskell-book-part1/:1:0","tags":["programming","programming languages","Haskell"],"title":"Haskell Book: Part 1","uri":"/haskell-book-part1/"},{"categories":["Learning Haskell"],"content":"My resolution to start learning Haskell.","date":"2023-06-29","objectID":"/beginning-my-haskell-journey/","tags":["programming","programming languages","Haskell"],"title":"Beginning My Haskell Journey","uri":"/beginning-my-haskell-journey/"},{"categories":["Learning Haskell"],"content":"I’ve been interested in functional programming languages for a while now. Having gone through some Scheme / Racket, some Elm as well as a little Standard ML, I guess I have no more excuse to procrastinate learning Haskell, which was the initial idea all along, basically. I am a little put off but all the horror stories about people who attempted to learn Haskell, unsuccessfully, many times over. So this series of posts will be my way to hold myself accountable and, if so be it, publicly acknowledge my shameful failure and my addition to the above mentioned heap of wannabee Haskellers. Right now I am quite unsure about whether I should go. One route is to just go through the Haskell book as many seem to be suggesting. Another, more project-based and maybe more suited to me, would be to follow this. I think a mix of the two approaches might be the best thing, but then I’d probably get lost - as usual - by doing more than one thing at a time. To add to my confusion, there is this resource…. ","date":"2023-06-29","objectID":"/beginning-my-haskell-journey/:0:0","tags":["programming","programming languages","Haskell"],"title":"Beginning My Haskell Journey","uri":"/beginning-my-haskell-journey/"},{"categories":["Ramblings"],"content":"I probably should get my act together and actually read and study SICP. ","date":"2023-03-09","objectID":"/reading-sicp/:0:0","tags":["programming","SICP"],"title":"Berni's adventures in SICPland","uri":"/reading-sicp/"},{"categories":null,"content":"About me ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"TLDR I am Bernardino, and I am a JOATMON (Jack Of All Trades, Master of None) from Milan, Italy. I built this site mostly as a personal blog to document my journey as a self-taught 50+ computer programmer. Trained as a philosopher, I work as a management consultant. ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Computer stuff When it comes to computers my main areas of interest lie in AI (I am, by the way, a Google Certified Tensorflow Developer) and functional programming. I am on the Advisory Board of deepers.ai, an AI education/consulting platform, and in my extra-time I lead the Italian chapter of Omdena, a platform that helps crowdsource ML/AI products for NGOs, impact and ESG projects. I occasionally write about artificial intelligence and computer science, e.g.: How to build a neural network from zero is, well, pretty self-explanatory Want to get good at recursion? Here is my advice (basically a review of the wonderful The Little Schemer book). You can read my articles on   Medium. ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Personal and varia I have a beloved son who is currently a student at Bocconi University and I am married with lovely Stephanie. Stephanie and I adopted a Maremma / Retriever Mix named Jonny in 2021 and are very, very, fond of him. I am a voracious music lover, an avid book reader, and a not very good guitar player. ","date":"0001-01-01","objectID":"/about/:3:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Projects Here is some stuff I have been fooling around with. Milan Culture Mapp is a webapp I built when I was collaborating with the Municipality of Milano on a project mapping the city’s cultural venues. The backend is built in Django, the frontend is vanilla JS and the interactive map is rendered in Folium. ReviewGeek is a small project I did in a weekend for an acquaintance of mine who signaled they wanted a better way to keep track of TripAdvisor reviews for their restaurants. It is built in Streamlit. A bare bones calculator I built as a React exercise. ","date":"0001-01-01","objectID":"/projects/:0:0","tags":null,"title":"","uri":"/projects/"}]